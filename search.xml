<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[不常用但是很重要的CSS]]></title>
    <url>%2F2018%2F09%2F26%2Fcss%2F</url>
    <content type="text"><![CDATA[1.letter-spacing: value;——设置字符间距，可以设置字母与字母之间的间距2.box-sizing: 以特定的方式定义匹配某个区域的特定元素3.text-overflow: 规定当文本溢出包含元素时发生的事情。 clip:修建文本（默认）。 ellipsis:显示省略符号来代表被修剪的文本。 string:使用给定的字符串来代表被修剪的文本。4.white-space: 设置如何处理元素内的空白 normal:默认。空白会被浏览器忽略。 pre:空白会被浏览器保留。其行为方式类似HTML中的&lt;pre&gt; 标签。 nowrap:文本不会换行，文本会在同一行上继续，直到遇到&lt;br&gt;标签为止。 pre-wrap:保留空白符序列，但是正常地进行换行。 pre-line:合并空白符序列，但是保留换行符。 inherit:规定应该从父元素继承white-space属性的值。5.box-flex: value;——规定框的子元素是否可伸缩其尺寸 浏览器支持: 目前没有浏览器支持box-flex属性。 Firefox 支持替代的 -moz-box-flex 属性。Safari、Opera 以及 Chrome 支持替代的 -webkit-box-flex 属性。6.word-break——规定自动换行的方法 normal:使用浏览器默认换行的规则。 break-all:允许在单词内换行。 keep-all:只能在半角空格或字符处换行。7.-webkit-box-orient——规定框的子元素应该被水平或垂直排列。 浏览器支持 目前没有浏览器支持box-orient属性。 Firefox支持代替的-moz-box-orient属性。 Safari、Opera以及Chrome支持替代的-webkit-box-orient属性。 horizontal:在水平行中从左向右排列子元素。 vertical:从上向下垂直排列子元素。 inline-axis:沿着行内轴来排列子元素（映射为horizontal）。 block-axis:沿着块轴来排列子元素（映射为vertical)。 inherit:应该从父元素继承box-orient属性的值。8.-webkit-line-clamp——限制一个块元素显示的文本的行数。 display:-webkit-box; -webkit-line-clam:2; text-overflow:ellipsis; -webkit-box-orient:vertical;9.text-indent——规定文本块中首行文本的缩进。10.transform11.transition-duration12.resize——规定一个元素是否是由用户调整大小的。 none:用户无法调整元素的尺寸。 both:用户可调整元素的高度和宽度。 horizontal:用户可调整元素的宽度。 vertical:用户可调整元素的高度。13.border-spacing——设置相邻单元格的边框间的距离（仅用于“边框分离”模式）。14.border-collapse——设置表格的边框是否被合并为一个单一的边框，还是像在标准的HTML中那样分开显示。 separate:默认值。边框会被区分开。不会忽略border-spacing和empty-cells属性。 collapese:如果可能，边框会合并为一个单一的边框。会忽略 border-spacing 和 empty-cells 属性。 inherit:规定应该从父元素继承 border-collapse 属性的值。]]></content>
      <tags>
        <tag>前端，CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue组件之间的通信]]></title>
    <url>%2F2018%2F06%2F05%2Fvue-communication%2F</url>
    <content type="text"><![CDATA[前言组件关键主要有三种：父–&gt;子、子–&gt;父、非父子 父–&gt;子父向子传递数据通过props 子–&gt;父子组件向父组件传递分为两种类型。1、子组件改变父组件传递的props(你会发现通过props中的Object类型参数传输数据，可以通过子组件改变数据内容。这种方式是可行的，但是不推荐使用，因为官方定义prop是单向绑定)2、通过$on和$emit]]></content>
      <tags>
        <tag>vue</tag>
        <tag>组件</tag>
        <tag>组件通信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端页面布局的几种方法]]></title>
    <url>%2F2018%2F05%2F17%2FlayoutMethods%2F</url>
    <content type="text"><![CDATA[HTML:123456789&lt;ul class="box"&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;&lt;/ul&gt; 一、float均匀布局1234567891011121314151617.box&#123; border: 1px solid #000; overflow: hidden;&#125;.box li&#123; width:33%; #为不兼容的浏览器设置宽度。 width:-moz-calc(100% / 3 - 5px); width:-webkit-calc(100% / 3 - 5px); width: calc(100% / 3 - 5px); height: 100px; margin-right: calc(5px*3 / 2); background: #8a4182; float: left;&#125;.box li:nth-child(3n)&#123; margin-right: 0;&#125; 说明：用上面的例子来看，如果是列数是奇数均匀分布(栗子是每行三列)，宽度width用CSS3的calc()来进行计算，可避免宽度为33.333的尴尬。width: calc(100% / i - 5px); margin-right: cale(5px*i / i-1);i为你需要设置的列数。唯一的缺点就是浏览器兼容不好。 二、flex 弹性布局1、flex布局兼容性支持&gt;=IE11,IE10需要添加浏览器私有前缀(-ms-)123.box&#123; display: flex;&#125; 行内元素也可使用flex布局。123.box&#123; display: inline-flex;&#125; 浏览器需要加私有前缀的，比如：Webkit内核的浏览器，需要加上-webkit前缀。1234.box&#123; display: -webkit-flex; display： flex;&#125; 设置为flex之后，子元素的float、clear和vertival-align属性将失效。 2、容器的属性 flex-direction flex-wrap flex-flow justify-content align-items align-content 2.1 flex-direction属性flex-direction决定主轴的方向 123.box&#123; flex-direction:row | row-reverse | column | column-reverse;&#125; row:（默认值），主轴为水平方向，起点在左端。 row-reverse:主轴为水平方向，起点在右端。 column: 主轴为垂直方向，起点在上沿。 column-reverse: 主轴为垂直方向，起点在下沿。 2.2 flex-wrap属性flex-wrap项目排列在一条轴线上，如果排列不下如何换行 123.box&#123; flex-wrap: nowrap | wrap | wrap-reverse;&#125; nowrap: （默认）不换行。 wrap: 换行，第一行在上方。 wrap-reverse: 换行，第一行在下方。2.3 flex-flowflex-flow是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap123.box&#123; flex-diretion: &lt;flex-direction&gt; ||&lt;flex-wrap&gt;;&#125; 2.4 justify-contentjustify-content属性定义了项目在主轴上的对齐方式。123.box&#123; justify-content: flex-start | flex-end | center | space-between | space-around;&#125; flex-start: (默认值)，左对齐。 flex-end: 右对齐。 center: 居中。 space-between: 两端对齐，项目之间间隔。 space-around: 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。2.5 align-itemsalign-items属性定义项目在交叉轴上如何对齐。123.box&#123; align-items: flex-start |flex-end | center | baseline | stretch;&#125; 具体对齐方式与交叉轴的方向有关系，假设交叉轴从上到下。 flex-start: 交叉轴的起点对齐。 flex-end: 交叉轴的终点对齐。 center: 交叉轴的中点对齐。 baseline: 项目的第一行文字的基线对齐。 stretch: （默认值），如果项目未设置高度或设为auto，将占满整个容器的高度。2.6 align-contentalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 flex-start: 交叉轴的起点对齐。 flex-end: 交叉轴的终点对齐。 center: 交叉轴的中点对齐。 space-between: 与交叉轴两端对齐，轴线之间的间隔平均分布。 space-around: 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 stretch: （默认值）轴线占满整个交叉轴。3、项目的属性3.1 order属性order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0.3.2 flex-grow属性flex-grow属性定义项目的放大比例，默认为·0,即如果存在剩余的空间，也不放大。3.3 flex-shrink属性flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。3.4 flex-basis属性flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto, 即项目本来的大小。3.5 flex属性flex属性是flex-grow,flex-shrink和flex-basis的简写，默认值为0 1 auto。后两个属性可选。]]></content>
      <tags>
        <tag>前端布局</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔文章]]></title>
    <url>%2F2018%2F05%2F09%2Fthird-blog%2F</url>
    <content type="text"><![CDATA[这是我的第一篇随笔文章]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github常见操作和常见错误！]]></title>
    <url>%2F2017%2F02%2F18%2Fsecond-blog%2F</url>
    <content type="text"><![CDATA[错误提示：fatal: remote origin already exists.如果输入$ git remote add origin git@github.com:djqiang（github帐号名）/gitdemo（项目名）.git提示出错信息：fatal: remote origin already exists.解决办法如下： 先输入$ git remote rm origin. 在输入$ git remote add origin git@github.com:djqiang/gitdemo.git 就不会报错了！ 如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section ‘remote.origin’. 我们需要修改gitconfig文件的内容 找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc 找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉就好了！]]></content>
      <tags>
        <tag>Github</tag>
        <tag>常见错误</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo+github搭建博客]]></title>
    <url>%2F2016%2F04%2F26%2FfirstBlog%2F</url>
    <content type="text"><![CDATA[1. 准备工作1&gt;必须有一个github账号，没有的话需要注册一个；2&gt;安装了node.js、npm，并且了解相关的基础知识；3&gt;安装git(或者其它git客户端) 2. 搭建github博客2.1 新建一个名为 你github博客用户名.github.io的仓库(必须是你用户名，其它名称无效)，将来你的网站的名字就是http://你github博客用户名.github.io。几个需要注意的地方： 注册的邮箱一定要验证，否则不会成功。 仓库的名字必须是：username.github.io,其中username是你的用户名。 仓库创建成功不会立即生效，需要过一段时间。 2.2 绑定域名如果你不绑定域名的话就会默认为XXX.github.io来访问，如果你想更个性一点，想拥有一个属于自己的域名，可以去阿里云，价格也不贵！ 2.3 配置SSH key为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的链接问题。1$ cd ~/. ssh #检查本机是否已经存在ssh密匙 如果提示：No such file or directory 说明你是第一次使用git,此时执行下面的命令。1ssh-keygen -t rsa -C "邮箱地址" 然后连续回车三次之后会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入到个人设置-&gt;SSH and GPG keys -&gt;New SSH key:把刚复制的内容粘贴到key那里，title随便填，保存。 3. 测试是否成功1$ ssh -T git@github.com #注意邮箱地址不用改 如果提示 Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：Hi XXX!You have successfully authenticated,but github does not provide shell access.看到这个信息说明SSH已经配置成功！接下来，还需要配置：12$ git config --global user.name "XXX" #你的github用户名，非昵称$ git config --global user.email "XXX@qq.com" #填写你的github注册邮箱 4. 使用hexo写博客4.1 hexo简介hexo 是一个简单、快速、强大的基于GitHub Page的博客发布工具，支持Markdown格式，有众多优秀插件和主题。官网：http://hexo.iogithub: https://github.com/hexojs/hexo 4.2 原理由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 4.3 注意事项 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行； hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导； hexo有2种_config.yml文件，一个是根目录下的全局_config.yml,一个是各个theme下的； 4.4 安装1$ npm install -g hexo 4.5 初始化创建一个新的文件夹，文件夹下载创建一个名字为hexo的文件，这个文件就是你存放代码的文件夹，所以不要乱放。比如E://myblog/hexo。12$ cd /e/myblog/hexo/$hexo init hexo会自动下载一些文件到这个目录，包括node_modules12$ hexo g #生成$ hexo s #启动服务 执行这些命令之后，hexo会在public文件夹中生成相关的html文件，这些文件将来都是要提交到GitHub上去的hexo s是开启本地预览服务，打开浏览器访问http://localhost:4000即可看到内容。 4.6 修改主题这是官方主题 官方主题举例例子，更换 hexo-theme-jekyll这个主题首先下载这个主题：12$ cd /e/myblog/hexo/$ git clone https://github.com/litten/hexo-theme-jekyll.git themes/jekyll 修改之后再hexo/themes中会有jekyll这个文件修改根目录中的_config.yml中的theme:landscape改为 theme:jekyll,然后重新执行hexo g来重新生成。如果出现一些乱七八糟的问题，用hexo clean来清理一下public的内容，然后重新生成和发布。 4.7 上传到github如果你一切都配置好了，只需要hexo d就可以上传成功。首先，ssh key肯定要配置好。其次，配置_config.yml中有关deploy的部分。正确写法：1234deploy: type: git repository: git@github.com:XXX/XXX.github.io.git branch:master 打开你的git bash,输入 hexo d就会将本次有改动的代码全部提交，没有改动的不会。 4.8 写博客定位到我们的hexo根目录，执行命令：1hexo new 'my-first-blog' hexo会帮我们在_posta下生成相关md文件。当然你也可以自己建这个文件。然后只需要打开my-first-blog这个文件就可以写博客了12345678---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文 4.9 常见hexo命令常见命令1234567hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写：1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令：12hexo s -g #生成并本地预览hexo d -g #生成并上传]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
</search>
